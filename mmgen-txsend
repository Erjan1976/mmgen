#!/usr/bin/env python
#
# mmgen = Multi-Mode GENerator, command-line Bitcoin cold storage solution
# Copyright (C) 2013 by philemon <mmgen-py@yandex.com>
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""
mmgen-txsend: Broadcast a Bitcoin transaction to the network 
"""

import sys

from mmgen.Opts import *
from mmgen.license import *
from mmgen.config import *
from mmgen.tx import *
from mmgen.utils import msg,check_opts,check_infile,get_lines_from_file,confirm_or_exit

prog_name = sys.argv[0].split("/")[-1]

help_data = {
	'prog_name': prog_name,
	'desc':    "Send a Bitcoin transaction signed by mmgen-txsign",
	'usage':   "[opts] <signed transaction file>",
	'options': """
-h, --help          Print this help message
-d, --outdir     d  Specify an alternate directory 'd' for output
-q, --quiet         Suppress warnings; overwrite files without asking
"""
}

short_opts = "hd:q"
long_opts  = "help","outdir=","quiet"

opts,cmd_args = process_opts(sys.argv,help_data,short_opts,long_opts)

# Exits on invalid input
check_opts(opts, ('outdir',))

if len(cmd_args) == 1:
	infile = cmd_args[0]
	check_infile(infile)
else: usage(help_data)

# Begin execution

try:
	metadata,tx_sig = get_lines_from_file(infile,"signed transaction")
except:
	msg("Invalid signed transaction file")
	sys.exit(3)

metadata = metadata.split()
if len(metadata) != 3:
	msg("Invalid file header")
	sys.exit(3)

from binascii import unhexlify
try: unhexlify(tx_sig)
except:
	msg("Invalid signed transaction data")
	sys.exit(3)

if not 'quiet' in opts: do_license_msg()

msg("Signed transaction file '%s' appears valid" % infile)

warn   = "Once this transaction is sent, there's no taking it back!"
what   = "broadcast this transaction to the network"
expect = "yes, i really want to do this".upper()
confirm_or_exit(warn, what, expect)

msg("Sending transaction")

c = connect_to_bitcoind(mmgen=True)

try:
	tx = c.sendrawtransaction(tx_sig)
#	tx = "deadbeef"
except:
	msg("Unable to send transaction")
	sys.exit(3)

msg("Transaction sent: %s" % tx)

print_sent_tx_to_file(tx,metadata,opts)
