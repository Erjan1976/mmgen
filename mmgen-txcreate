#!/usr/bin/env python
#
# mmgen = Multi-Mode GENerator, command-line Bitcoin cold storage solution
# Copyright (C) 2013 by philemon <mmgen-py@yandex.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""
mmgen-txcreate: Create a BTC transaction, sending to specified addresses
"""

import sys
#from hashlib import sha256

from mmgen.Opts import *
from mmgen.license import *
import mmgen.config as g
from mmgen.tx import *
from mmgen.util import msg, msg_r, user_confirm
from decimal import Decimal

prog_name = sys.argv[0].split("/")[-1]

help_data = {
	'prog_name': prog_name,
	'desc':    "Create a BTC transaction with outputs to specified addresses",
	'usage':   "[opts]  <addr,amt> ... [change addr] [tx fee] [addr file] ...",
	'options': """
-h, --help                Print this help message
-d, --outdir           d  Specify an alternate directory 'd' for output
-e, --echo-passphrase     Print passphrase to screen when typing it
-i, --info                Display unspent outputs and exit
-q, --quiet               Suppress warnings; overwrite files without
                          prompting

-f, --tx-fee           f  Transaction fee (default: %s BTC)

Transaction inputs are chosen from a list of the user's unpent outputs
via an interactive menu.

Ages of transactions are approximate based on an average block creation
interval of %s minutes.

Addresses on the command line can be Bitcoin addresses or MMGen
addresses in the form <seed ID>:<number>
""" % (Decimal(g.tx_fee),g.mins_per_block)
}

short_opts = "ha:d:eiqf:"
long_opts  = "help","addr_file","outdir=","echo_passphrase","info","quiet",\
				"tx_fee="

opts,cmd_args = process_opts(sys.argv,help_data,short_opts,long_opts)

check_opts(opts,long_opts)

if g.debug: show_opts_and_cmd_args(opts,cmd_args)

if not 'info' in opts:

	outputs,addr_files,change_addr = [],[],""

	for a in cmd_args:
		if a.split(".")[-1] == g.addrfile_ext:
			check_infile(a)
			addr_files.append(a)
		elif "," in a:
			outputs.append(a)
		else:
			if change_addr:
				msg("More than one change address specified: %s, %s" %
						(change_addr, a))
				sys.exit(2)
			change_addr = a

	if not outputs:
		msg("At least one output must be specified on the command line")
		sys.exit(2)

	addr_data = [parse_addrs_file(f) for f in addr_files]

	tx_fee = opts['tx_fee'] if 'tx_fee' in opts else g.tx_fee

	try:
		tx_fee = Decimal(tx_fee)
	except:
		msg("Invalid transaction fee format: %s" % tx_fee)
		sys.exit(2)

	if tx_fee > g.max_tx_fee:
		msg("Transaction fee too large: %s > %s" % (tx_fee,g.max_tx_fee))
		sys.exit(2)

	if change_addr:
		if ":" in change_addr:
			change_addr = mmgen_addr_to_btc_addr(change_addr,addr_data)
		else:
			check_address(change_addr)


	tx_out = make_tx_out(outputs,addr_data)

	for i in tx_out.keys():   check_address(i)
	for i in tx_out.values(): check_btc_amt(i)

	tx_fee = check_btc_amt(tx_fee)

if g.debug: show_opts_and_cmd_args(opts,cmd_args)

# Begin execution
c = connect_to_bitcoind()

if not 'quiet' in opts and not 'info' in opts:
	do_license_msg(immed=True)

# Begin test
# import mmgen.rpc
# us = eval(get_data_from_file("listunspent.json"))
# End test

us = c.listunspent()

if not us:
	msg_r("""
No spendable outputs found!  Import addresses with balances into your
watch-only wallet using 'mmgen-addrimport' and then re-run this program.
""")
	sys.exit(2)

# write_to_file("listunspent.json",repr(us))
# sys.exit()
unspent = sort_and_view(us)

total = trim_exponent(sum([i.amount for i in unspent]))

msg("Total unspent: %s BTC (%s outputs)" % (total, len(unspent)))
if 'info' in opts: sys.exit(0)

send_amt = sum(tx_out.values())
msg("Total amount to spend: %s BTC" % send_amt)

while True:
	sel_nums = select_outputs(unspent,
			"Enter a range or space-separated list of outputs to spend: ")
	msg("Selected outputs: %s" % " ".join(str(i) for i in sel_nums))
	sel_unspent = [unspent[i-1] for i in sel_nums]

	lbls = set([verify_mmgen_label(
				i.account,return_str=True,check_label_len=True)
					for i in sel_unspent])
	lbls.discard("")

	if lbls and len(lbls) < len(sel_unspent):
		msg(txmsg['mixed_inputs'] % ", ".join(sorted(lbls)))
		if not user_confirm("Accept?"):
			continue

	total_in = trim_exponent(sum([o.amount for o in sel_unspent]))
	change   = trim_exponent(total_in - (send_amt + tx_fee))

	if change >= 0:
		prompt = "Transaction produces %s BTC in change.  OK?" % change
		if user_confirm(prompt,default_yes=True):
			break
	else:
		msg(txmsg['not_enough_btc'] % change)


if change > 0 and not change_addr:
	msg(txmsg['throwaway_change'] % (change, total_in-tx_fee))
	sys.exit(2)

tx_in = [{"txid":i.txid, "vout":i.vout} for i in sel_unspent]
for i in tx_out.keys(): tx_out[i] = float(tx_out[i])
if change: tx_out[change_addr] = float(change)
if g.debug:
	print "tx_in:", repr(tx_in)
	print "tx_out:", repr(tx_out)
tx_hex = c.createrawtransaction(tx_in,tx_out)

msg("Transaction successfully created")
prompt = "View decoded transaction? (y)es, (N)o, (v)iew in pager"
reply = prompt_and_get_char(prompt,"YyNnVv",enter_ok=True)
if reply and reply in "YyVv":
	pager = True if reply in "Vv" else False
	view_tx_data(c,[i.__dict__ for i in sel_unspent],tx_hex,pager=pager)

prompt = "Save transaction?"
if user_confirm(prompt,default_yes=True):
	print_tx_to_file(tx_hex,sel_unspent,send_amt,opts)
else:
	msg("Transaction not saved")
